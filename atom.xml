<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pronoy Chopra's Blog]]></title>
  <link href="http://DarkSector.github.com/atom.xml" rel="self"/>
  <link href="http://DarkSector.github.com/"/>
  <updated>2012-05-03T11:39:39+05:30</updated>
  <id>http://DarkSector.github.com/</id>
  <author>
    <name><![CDATA[Pronoy Chopra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrating from MongoAlchemy]]></title>
    <link href="http://DarkSector.github.com/blog/migrating-from-mongoalchemy/"/>
    <updated>2012-05-02T22:59:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/migrating-from-mongoalchemy</id>
    <content type="html"><![CDATA[<p>Extensions like <a href="http://packages.python.org/Flask-MongoAlchemy/">Flask-MongoAlchemy</a> and <a href="http://flask.pocoo.org/docs/patterns/mongokit/">Flask-MongoKit</a> are probably the most useless extensions for <a href="http://flask.pocoo.org/">Flask</a> because they ignore the inherent reason why Mongo is to be used. What is the point of using <a href="http://www.mongodb.org/">MongoDB</a> when you are going to used a fix schema. A fixed model declaration should be used with RDBMS like PostGRE and SQLite by using <a href="http://www.sqlalchemy.org/">SQLAlchemy</a>.</p>

<p>I wonder why hasn&#8217;t anyone come up with this question before. Either way I&#8217;ll be using PyMongo now. Flask has an extension for that, it&#8217;s called <a href="http://flask-pymongo.readthedocs.org/en/0-1/index.html">Flask-PyMongo</a>.</p>

<h2>MongoDB Basics</h2>

<p>Here&#8217;re some interesting relations between SQL and MongoDB&#8217;s way of organizing things.</p>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>SQL</th>
            <th>MongoDB</th>
        </tr>   
    </thead>
    <tbody> 
        <tr>
            <td>Database</td>
            <td>Database</td>
        </tr>
        <tr>
            <td>Table</td>
            <td>Collection</td>
        </tr>
        <tr>
            <td>Row</td>
            <td>Document</td>
        </tr>
        <tr>
            <td>Index</td>
            <td>Index</td>
        </tr>
        <tr>
            <td>Primary key</td>
            <td>_id field</td>
        </tr>
    </tbody>
</table>


<p>A complete list of relations is given in the mapping chart over at <a href="http://www.mongodb.org/display/DOCS/SQL+to+Mongo+Mapping+Chart">MongoDB&#8217;s website</a></p>

<p>This is neat considering you don&#8217;t need any fixed schema, just stash the data in and you can easily recover it. So now instead of using MongoAlchemy we will be using PyMongo directly which is fairly easy as well.</p>

<h2>Why Mongo with Python makes sense</h2>

<p>Python Dicts and Mongo&#8217;s BSON documents are just the same. So passing dicts as documents is fairly intuitive. Here&#8217;s a comparison:</p>

<figure class='code'><figcaption><span>dict.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;a&quot;</span> <span class="p">:</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span> <span class="p">:</span> <span class="s">&quot;d&quot;</span><span class="p">,</span> <span class="s">&quot;k&quot;</span> <span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>MongoDB schema example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">_id</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;4e77bb3b8a3e000000004f7a&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">when</span> <span class="o">:</span> <span class="nb">Date</span><span class="p">(</span><span class="s2">&quot;2011-09-19T02:10:11.3Z&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">author</span> <span class="o">:</span> <span class="s2">&quot;alex&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">title</span> <span class="o">:</span> <span class="s2">&quot;No Free Lunch&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">text</span> <span class="o">:</span> <span class="s2">&quot;This is the text of the post.  It could be very long.&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tags</span> <span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;business&quot;</span><span class="p">,</span> <span class="s2">&quot;ramblings&quot;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">votes</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">voters</span> <span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;jane&quot;</span><span class="p">,</span> <span class="s2">&quot;joe&quot;</span><span class="p">,</span> <span class="s2">&quot;spencer&quot;</span><span class="p">,</span> <span class="s2">&quot;phyllis&quot;</span><span class="p">,</span> <span class="s2">&quot;li&quot;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">comments</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">who</span> <span class="o">:</span> <span class="s2">&quot;jane&quot;</span><span class="p">,</span> <span class="nx">when</span> <span class="o">:</span> <span class="nb">Date</span><span class="p">(</span><span class="s2">&quot;2011-09-19T04:00:10.112Z&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">comment</span> <span class="o">:</span> <span class="s2">&quot;I agree.&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">who</span> <span class="o">:</span> <span class="s2">&quot;meghan&quot;</span><span class="p">,</span> <span class="nx">when</span> <span class="o">:</span> <span class="nb">Date</span><span class="p">(</span><span class="s2">&quot;2011-09-20T14:36:06.958Z&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">comment</span> <span class="o">:</span> <span class="s2">&quot;You must be joking.  etc etc ...&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s similar and therefore easier.</p>

<h2>PyMongo Usage</h2>

<figure class='code'><figcaption><span>start the mongo daemon on any port and application directory to store database</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongod --port 45000 --dbpath <span class="nv">$PATHTOAPPLICATION</span> DIRECTORY
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#import pymongo and make the connection</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pymongo</span> <span class="kn">import</span> <span class="n">Connection</span>
</span><span class='line'><span class="c">#connect it to the mongo daemon running on the port</span>
</span><span class='line'><span class="n">connection</span> <span class="o">=</span> <span class="n">Connection</span><span class="p">(</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">45000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that we&#8217;ll need to start creating databases and collections and inserting documents, I&#8217;ll post the code later when I am done with general implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A random graph using d3.js]]></title>
    <link href="http://DarkSector.github.com/blog/a-random-graph-using-d3-dot-js/"/>
    <updated>2012-05-01T19:17:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/a-random-graph-using-d3-dot-js</id>
    <content type="html"><![CDATA[<p><a href="http://d3js.org">D3.js</a> created by <a href="http://bost.ocks.org/mike/">Mike Bostock</a> is basically a javascript library that allows you to create documents based on data. The name D3 means Data Driven Documents and is a very nifty library to represent data on the web.
I came across this when I was looking for ways to represent data in real time on a web browser. I am trying to create data acquisition devices that do that. I&#8217;ve also been working on Python for that same thing but I&#8217;ll get to that later.</p>

<p>So I have this random graph on my homepage, it&#8217;s just an edited version of an <a href="http://mbostock.github.com/d3/ex/stack.html">example</a> on the d3 page. Here&#8217;s the code if you want to take a look at it.</p>

<figure class='code'><figcaption><span>stack.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="c1">// number of layers</span>
</span><span class='line'>    <span class="nx">m</span> <span class="o">=</span> <span class="mi">60</span><span class="p">,</span> <span class="c1">// number of samples per layer</span>
</span><span class='line'>    <span class="nx">data</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">stack</span><span class="p">()(</span><span class="nx">stream_layers</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">m</span><span class="p">,</span> <span class="p">.</span><span class="mi">1</span><span class="p">)),</span>
</span><span class='line'>    <span class="nx">color</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">interpolateRgb</span><span class="p">(</span><span class="s2">&quot;#00bfff&quot;</span><span class="p">,</span> <span class="s2">&quot;#aaa&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//00bfff</span>
</span><span class='line'>  <span class="c1">//1e90ff</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">margin</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">width</span> <span class="o">=</span> <span class="mi">824</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">=</span> <span class="mi">300</span> <span class="o">-</span> <span class="p">.</span><span class="mi">5</span> <span class="o">-</span> <span class="nx">margin</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">mx</span> <span class="o">=</span> <span class="nx">m</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">my</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y0</span> <span class="o">+</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}),</span>
</span><span class='line'>    <span class="nx">mz</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}),</span>
</span><span class='line'>    <span class="nx">x</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">width</span> <span class="o">/</span> <span class="nx">mx</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">y0</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">height</span> <span class="o">-</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y0</span> <span class="o">*</span> <span class="nx">height</span> <span class="o">/</span> <span class="nx">my</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">y1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">height</span> <span class="o">-</span> <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y0</span><span class="p">)</span> <span class="o">*</span> <span class="nx">height</span> <span class="o">/</span> <span class="nx">my</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">y2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span> <span class="o">*</span> <span class="nx">height</span> <span class="o">/</span> <span class="nx">mz</span><span class="p">;</span> <span class="p">};</span> <span class="c1">// or `my` to not rescale</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">vis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#chart&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="nx">width</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="nx">height</span> <span class="o">+</span> <span class="nx">margin</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">layers</span> <span class="o">=</span> <span class="nx">vis</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;g.layer&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">color</span><span class="p">(</span><span class="nx">i</span> <span class="o">/</span> <span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;layer&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bars</span> <span class="o">=</span> <span class="nx">layers</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;g.bar&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;translate(&quot;</span> <span class="o">+</span> <span class="nx">x</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;,0)&quot;</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bars</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;rect&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">({</span><span class="nx">x</span><span class="o">:</span> <span class="p">.</span><span class="mi">9</span><span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;y&quot;</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">delay</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;y&quot;</span><span class="p">,</span> <span class="nx">y1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">y0</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="o">-</span> <span class="nx">y1</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">labels</span> <span class="o">=</span> <span class="nx">vis</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;text.label&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;text&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;label&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;y&quot;</span><span class="p">,</span> <span class="nx">height</span> <span class="o">+</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;dx&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">({</span><span class="nx">x</span><span class="o">:</span> <span class="p">.</span><span class="mi">45</span><span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;dy&quot;</span><span class="p">,</span> <span class="s2">&quot;.71em&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;text-anchor&quot;</span><span class="p">,</span> <span class="s2">&quot;middle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">i</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">vis</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;line&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;x1&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;x2&quot;</span><span class="p">,</span> <span class="nx">width</span> <span class="o">-</span> <span class="nx">x</span><span class="p">({</span><span class="nx">x</span><span class="o">:</span> <span class="p">.</span><span class="mi">1</span><span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;y1&quot;</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;y2&quot;</span><span class="p">,</span> <span class="nx">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">transitionGroup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">group</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;#chart&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">group</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#group&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;first active&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">group</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#stack&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;last&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">group</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;g.layer rect&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">duration</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">delay</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="nx">m</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">({</span><span class="nx">x</span><span class="o">:</span> <span class="p">.</span><span class="mi">9</span> <span class="o">*</span> <span class="o">~~</span><span class="p">(</span><span class="nx">i</span> <span class="o">/</span> <span class="nx">m</span><span class="p">)</span> <span class="o">/</span> <span class="nx">n</span><span class="p">});</span> <span class="p">})</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">({</span><span class="nx">x</span><span class="o">:</span> <span class="p">.</span><span class="mi">9</span> <span class="o">/</span> <span class="nx">n</span><span class="p">}))</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="nx">transitionEnd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">transitionEnd</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">duration</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;y&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">height</span> <span class="o">-</span> <span class="nx">y2</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="nx">y2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">transitionStack</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">stack</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#chart&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">stack</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#group&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;first&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">stack</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#stack&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;last active&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">stack</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;g.layer rect&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">duration</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">delay</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="nx">m</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;y&quot;</span><span class="p">,</span> <span class="nx">y1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">y0</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="o">-</span> <span class="nx">y1</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span> <span class="p">})</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="nx">transitionEnd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">transitionEnd</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">duration</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">({</span><span class="nx">x</span><span class="o">:</span> <span class="p">.</span><span class="mi">9</span><span class="p">}));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve just changed a bit, only 2 layers instead of 4 and the colors are more according to my theme on the front page. The random number generation is also done through javascript. Here&#8217;s the code:</p>

<figure class='code'><figcaption><span>random.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* Inspired by Lee Byron&#39;s test data generator. */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">stream_layers</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">m</span><span class="p">,</span> <span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="nx">o</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">bump</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(.</span><span class="mi">1</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()),</span>
</span><span class='line'>        <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">-</span> <span class="p">.</span><span class="mi">5</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">z</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">/</span> <span class="p">(.</span><span class="mi">1</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">m</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">/</span> <span class="nx">m</span> <span class="o">-</span> <span class="nx">y</span><span class="p">)</span> <span class="o">*</span> <span class="nx">z</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">x</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">exp</span><span class="p">(</span><span class="o">-</span><span class="nx">w</span> <span class="o">*</span> <span class="nx">w</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="nx">n</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">m</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">o</span> <span class="o">+</span> <span class="nx">o</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">bump</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">stream_index</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Another layer generator using gamma distributions. */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">stream_waves</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="nx">n</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="nx">m</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">20</span> <span class="o">*</span> <span class="nx">j</span> <span class="o">/</span> <span class="nx">m</span> <span class="o">-</span> <span class="nx">i</span> <span class="o">/</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">x</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">exp</span><span class="p">(</span><span class="o">-</span><span class="p">.</span><span class="mi">5</span> <span class="o">*</span> <span class="nx">x</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}).</span><span class="nx">map</span><span class="p">(</span><span class="nx">stream_index</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">stream_index</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">d</span><span class="p">)};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I asked a stupid question before, on the mailing list. Here&#8217;s <a href="http://groups.google.com/group/d3-js/browse_thread/thread/891cd4f571b0f6e4#">the link</a> to it. It&#8217;s good if you want to start with d3.js. All the best if you are.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Attempting integration with WTForms with MongoAlchemy]]></title>
    <link href="http://DarkSector.github.com/blog/attempting-integration-with-wtforms-with-mongoalchemy/"/>
    <updated>2012-04-18T10:56:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/attempting-integration-with-wtforms-with-mongoalchemy</id>
    <content type="html"><![CDATA[<p>So the forms.py looks something like this.</p>

<figure class='code'><figcaption><span>forms.py </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">with_statement</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">session</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span> <span class="n">url_for</span><span class="p">,</span> <span class="n">abort</span><span class="p">,</span> \
</span><span class='line'>     <span class="n">render_template</span><span class="p">,</span> <span class="n">flash</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flaskext.wtf</span> <span class="kn">import</span> <span class="n">Form</span><span class="p">,</span> <span class="n">TextField</span><span class="p">,</span> <span class="n">TextAreaField</span><span class="p">,</span> \
</span><span class='line'>   <span class="n">PasswordField</span><span class="p">,</span> <span class="n">SubmitField</span><span class="p">,</span> <span class="n">Required</span><span class="p">,</span> <span class="n">SelectField</span><span class="p">,</span> <span class="n">ValidationError</span><span class="p">,</span> \
</span><span class='line'>   <span class="n">RadioField</span>
</span><span class='line'>      
</span><span class='line'><span class="kn">from</span> <span class="nn">foo</span> <span class="kn">import</span> <span class="n">app</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">foo</span> <span class="kn">import</span> <span class="n">db</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BuilderForm</span><span class="p">(</span><span class="n">Form</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&quot;&quot;&quot;Function used to create custom fields&quot;&quot;&quot;</span>
</span><span class='line'>  <span class="n">field_name</span> <span class="o">=</span> <span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>  <span class="n">field_type</span> <span class="o">=</span> <span class="n">SelectField</span><span class="p">(</span><span class="s">u&#39;Type of Field&#39;</span><span class="p">,</span><span class="n">choices</span><span class="o">=</span><span class="p">[(</span><span class="s">&#39;&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)])</span>
</span><span class='line'>  <span class="n">submit</span> <span class="o">=</span> <span class="n">SubmitField</span><span class="p">(</span><span class="s">&#39;Submit Information&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">class</span> <span class="nc">Register</span><span class="p">(</span><span class="n">Form</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&quot;&quot;&quot;Form for registeration of professional, org or moderator&quot;&quot;&quot;</span>        
</span><span class='line'>  <span class="n">usertype</span> <span class="o">=</span> <span class="n">SelectField</span><span class="p">(</span><span class="s">u&#39;Type of user&#39;</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[(</span><span class="s">&#39;org&#39;</span><span class="p">,</span><span class="s">&#39;Organization&#39;</span><span class="p">),(</span><span class="s">&#39;pro&#39;</span><span class="p">,</span><span class="s">&#39;Professional&#39;</span><span class="p">),(</span><span class="s">&#39;mod&#39;</span><span class="p">,</span><span class="s">&#39;Moderator&#39;</span><span class="p">)])</span>
</span><span class='line'>  <span class="n">name</span> <span class="o">=</span> <span class="n">TextField</span><span class="p">(</span><span class="s">&#39;Organization/Professional Name&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">email</span> <span class="o">=</span> <span class="n">TextField</span><span class="p">(</span><span class="s">&#39;Email addresss *&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">phone</span> <span class="o">=</span> <span class="n">TextField</span><span class="p">(</span><span class="s">&#39;Phone Number *&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">register</span> <span class="o">=</span> <span class="n">SubmitField</span><span class="p">(</span><span class="s">&#39;Submit user information&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">class</span> <span class="nc">LoginForm</span><span class="p">(</span><span class="n">Form</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&quot;&quot;&quot;Form for logging in for Professionals and Orgs&quot;&quot;&quot;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">email</span> <span class="o">=</span> <span class="n">TextField</span><span class="p">(</span><span class="s">&#39;Your email which you used to register&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">password</span> <span class="o">=</span> <span class="n">PasswordField</span><span class="p">(</span><span class="s">&#39;Your passsword&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">usertype</span> <span class="o">=</span> <span class="n">SelectField</span><span class="p">(</span><span class="s">u&#39;Log me in as&#39;</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[(</span><span class="s">&#39;org&#39;</span><span class="p">,</span><span class="s">&#39;Organization&#39;</span><span class="p">),(</span><span class="s">&#39;pro&#39;</span><span class="p">,</span><span class="s">&#39;Professional&#39;</span><span class="p">),(</span><span class="s">&#39;mod&#39;</span><span class="p">,</span><span class="s">&#39;Moderator&#39;</span><span class="p">)])</span>
</span><span class='line'>  <span class="n">login</span> <span class="o">=</span> <span class="n">SubmitField</span><span class="p">(</span><span class="s">&#39;Login&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">class</span> <span class="nc">StarterForm</span><span class="p">(</span><span class="n">Form</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&quot;&quot;&quot;Form for starting off the profile display process&quot;&quot;&quot;</span>
</span><span class='line'>  <span class="n">region</span> <span class="o">=</span> <span class="n">SelectField</span><span class="p">(</span><span class="s">u&#39;Select you state&#39;</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[])</span>
</span><span class='line'>  <span class="n">pincode</span> <span class="o">=</span> <span class="n">TextField</span><span class="p">(</span><span class="s">&quot;Your pincode&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">specific</span> <span class="o">=</span> <span class="n">TextField</span><span class="p">(</span><span class="s">&quot;Town or Village&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">submit</span> <span class="o">=</span> <span class="n">SubmitField</span><span class="p">(</span><span class="s">&#39;Submit&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how the region field in StarterForm would require database driven choices? Yeah I need to figure out how to do that in my views function. It&#8217;s important to render the views otherwise it might break the whole thing by circular imports.</p>

<p>Also since Forms are classes it would be difficult to pass the arguments when calling the form in views. Okay let&#8217;s attempt that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prototyping web based data acquisition applications]]></title>
    <link href="http://DarkSector.github.com/blog/prototyping-web-based--data-acquisition-applications/"/>
    <updated>2012-04-17T03:15:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/prototyping-web-based&#8211;data-acquisition-applications</id>
    <content type="html"><![CDATA[<p>In order to build an application that processes or even simply displays data being acquired by say the serial port, it is not important to actually have the device connected.</p>

<p>We can build virtual serial pairs and have our backend transmit and acquire dummy data and then test the processing logic. This is one of the reasons why I love Python. It just doesn&#8217;t get in your way and gets you all the stuff you need to get started ASAP.</p>

<p>So I&#8217;ve resorted to <a href="http://pyserial.sourceforge.net/">PySerial</a> and this application called <a href="http://code.google.com/p/macosxvirtualserialport/">Virtual Serial Port</a>. The latter creates a pair in the /dev and the former is used to put in the data from one end and retrieve it at the other. An important question one could ask, why not just generate dummy data than getting it passed through a virtual serial pipe? Answer is that it&#8217;s the closest way to the real thing, might as well get it done.</p>

<p>So, after having created serial ports, now to simply create two scripts that pour and retrieve data.</p>

<figure class='code'><figcaption><span>Dummy-feeder.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">serial</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">_portname</span> <span class="o">=</span> <span class="s">&#39;/dev/master&#39;</span>
</span><span class='line'><span class="n">dumper</span> <span class="o">=</span> <span class="n">serial</span><span class="o">.</span><span class="n">Serial</span><span class="p">(</span><span class="n">_portname</span><span class="p">,</span><span class="mi">115200</span><span class="p">,</span><span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>  <span class="n">l</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1023</span><span class="p">)</span>
</span><span class='line'>  <span class="n">k</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="s">&#39;abcdef&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dumper</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dumper</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;random sensor:&quot;</span><span class="p">,</span><span class="n">k</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;random print: &quot;</span><span class="p">,</span><span class="n">l</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Receiver.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">serial</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="n">_recvport</span> <span class="o">=</span> <span class="s">&#39;/dev/slave&#39;</span>
</span><span class='line'><span class="n">recv</span> <span class="o">=</span> <span class="n">serial</span><span class="o">.</span><span class="n">Serial</span><span class="p">(</span><span class="n">_recvport</span><span class="p">,</span><span class="mi">115200</span><span class="p">,</span><span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">recv</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;received:&quot;</span><span class="p">,</span> <span class="n">data</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yeah, so as it&#8217;s pretty obvious, dummy feeds the data and receiver receives it and just dumps it out on STDOUT. Now, that I&#8217;ve got this data, I need to be able to manipulate it to be able to send it to my application server. I think I&#8217;ll need the involvement of JSON here. Must experiment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress problem]]></title>
    <link href="http://DarkSector.github.com/blog/octopress-problem/"/>
    <updated>2012-04-17T00:52:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/octopress-problem</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>CNAME</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;pronoy.blog.in&quot;</span> &gt;&gt; CNAME
</span><span class='line'><span class="nv">$ </span>git add CNAME
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;added CNAME&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>


<p>Every time I deploy it removes the CNAME record from the master branch. I wonder how to get it deployed properly.</p>

<p>Really weird, I&#8217;ll have to keep looking.
Oh btw, it&#8217;s my birthday today :)</p>

<p>EDIT: resolved, you need to generate the CNAME in source for it to automatically pick it up and commit it to the master. Smart.</p>
]]></content>
  </entry>
  
</feed>
