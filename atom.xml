<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pronoy Chopra's Blog]]></title>
  <link href="http://DarkSector.github.com/atom.xml" rel="self"/>
  <link href="http://DarkSector.github.com/"/>
  <updated>2012-04-17T03:33:39+05:30</updated>
  <id>http://DarkSector.github.com/</id>
  <author>
    <name><![CDATA[Pronoy Chopra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Prototyping data acquisition applications]]></title>
    <link href="http://DarkSector.github.com/blog/2012/04/17/prototyping-data-acquisition-applications/"/>
    <updated>2012-04-17T03:15:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/2012/04/17/prototyping-data-acquisition-applications</id>
    <content type="html"><![CDATA[<p>In order to build an application that processes or even simply displays data being acquired by say the serial port, it is not important to actually have the device connected.</p>

<p>We can build virtual serial pairs and have our backend transmit and acquire dummy data and then test the processing logic. This is one of the reasons why I love Python. It just doesn&#8217;t get in your way and gets you all the stuff you need to get started ASAP.</p>

<p>So I&#8217;ve resorted to <a href="http://pyserial.sourceforge.net/">PySerial</a> and this application called <a href="http://code.google.com/p/macosxvirtualserialport/">Virtual Serial Port</a>. The latter creates a pair in the /dev and the former is used to put in the data from one end and retrieve it at the other. An important question one could ask, why not just generate dummy data than getting it passed through a virtual serial pipe? Answer is that it&#8217;s the closest way to the real thing, might as well get it done.</p>

<p>So, after having created serial ports, now to simply create two scripts that pour and retrieve data.</p>

<figure class='code'><figcaption><span>Dummy-feeder.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">serial</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">_portname</span> <span class="o">=</span> <span class="s">&#39;/dev/master&#39;</span>
</span><span class='line'><span class="n">dumper</span> <span class="o">=</span> <span class="n">serial</span><span class="o">.</span><span class="n">Serial</span><span class="p">(</span><span class="n">_portname</span><span class="p">,</span><span class="mi">115200</span><span class="p">,</span><span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>  <span class="n">l</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1023</span><span class="p">)</span>
</span><span class='line'>  <span class="n">k</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="s">&#39;abcdef&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dumper</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dumper</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;random sensor:&quot;</span><span class="p">,</span><span class="n">k</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;random print: &quot;</span><span class="p">,</span><span class="n">l</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Receiver.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">serial</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="n">_recvport</span> <span class="o">=</span> <span class="s">&#39;/dev/slave&#39;</span>
</span><span class='line'><span class="n">recv</span> <span class="o">=</span> <span class="n">serial</span><span class="o">.</span><span class="n">Serial</span><span class="p">(</span><span class="n">_recvport</span><span class="p">,</span><span class="mi">115200</span><span class="p">,</span><span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">recv</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;received:&quot;</span><span class="p">,</span> <span class="n">data</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yeah, so as it&#8217;s pretty obvious, dummy feeds the data and receiver receives it and just dumps it out on STDOUT. Now, that I&#8217;ve got this data, I need to be able to manipulate it to be able to send it to my application server. I think I&#8217;ll need the involvement of JSON here. Must experiment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress problem]]></title>
    <link href="http://DarkSector.github.com/blog/2012/04/17/octopress-problem/"/>
    <updated>2012-04-17T00:52:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/2012/04/17/octopress-problem</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>CNAME</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;pronoy.blog.in&quot;</span> &gt;&gt; CNAME
</span><span class='line'><span class="nv">$ </span>git add CNAME
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;added CNAME&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>


<p>every time I deploy it removes the CNAME record from the master branch. I wonder how to get it deployed properly.</p>

<p>Really weird, I&#8217;ll have to keep looking.
Oh btw, it&#8217;s my birthday today :)</p>

<p>EDIT: resolved, you need to generate the CNAME in source for it to automatically pick it up and commit it to the master. Smart.</p>
]]></content>
  </entry>
  
</feed>
