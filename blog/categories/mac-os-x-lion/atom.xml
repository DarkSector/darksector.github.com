<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac OS X Lion | Pronoy Chopra's Blog]]></title>
  <link href="http://DarkSector.github.com/blog/categories/mac-os-x-lion/atom.xml" rel="self"/>
  <link href="http://DarkSector.github.com/"/>
  <updated>2012-05-23T23:43:50+05:30</updated>
  <id>http://DarkSector.github.com/</id>
  <author>
    <name><![CDATA[Pronoy Chopra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Replaced Spotlight with QuickSilver]]></title>
    <link href="http://DarkSector.github.com/blog/replaced-spotlight-with-quicksilver/"/>
    <updated>2012-05-14T14:57:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/replaced-spotlight-with-quicksilver</id>
    <content type="html"><![CDATA[<p>So after I decided not to use mds I removed spotlight's icon as well. Now I am using QuickSilver for the whole thing. It's way faster.</p>

<p>Here's a screenshot.</p>

<p><img src="http://f.cl.ly/items/1H3A2A0W0Q2A2j0E3S21/Screen%20Shot%202012-05-14%20at%202.54.46%20PM.png"></p>

<p>Yep, seems legit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spotlight/mds the memory hogger]]></title>
    <link href="http://DarkSector.github.com/blog/spotlight-slash-mds-the-memory-hogger/"/>
    <updated>2012-05-14T12:09:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/spotlight-slash-mds-the-memory-hogger</id>
    <content type="html"><![CDATA[<p>So in a yet another failure of an experience with the Mac Mini I have now realized why Apple is trying to put in SSD in all its products. I think it's because of the memory hogger called mds. It is supposed sit quietly and index files but as it turns out, the bugger takes almost 50 percent of the RAM.</p>

<p><img src="http://f.cl.ly/items/3J3c3F3i1s0R1f2b1X1s/Screen%20Shot%202012-05-14%20at%2012.04.32%20PM.png"></p>

<p>The highlighted one is the one I am talking about. I think I need to disable spotlight and put in QuickSilver.</p>

<p>I shall call my app, GetLostSpotlight. The code will be on Github obviously.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Allegro 5.0 with Xcode 4.3 on Mac OS X 10.7.4]]></title>
    <link href="http://DarkSector.github.com/blog/building-allegro-5-dot-0-with-xcode-4-dot-3-on-mac-os-x-10-dot-7-4/"/>
    <updated>2012-05-12T17:08:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/building-allegro-5-dot-0-with-xcode-4-dot-3-on-mac-os-x-10-dot-7-4</id>
    <content type="html"><![CDATA[<p>So here's the attempt to build <a href="http://allegro.cc">Allegro 5.0</a> on Mac OS X Lion 10.7.4 with the latest Xcode 4.3. As usual I am apprehensive of the outcome considering it's Xcode. You never know, how it might break.</p>

<p>Anyways, let's follow the <a href="http://wiki.allegro.cc/index.php?title=OSX,_Xcode_4,_Framework">wiki article</a> and the first step is to obviously checkout the repository. So lets do that.</p>

<p><code>bash svn checkout
DarkSector@DarkBookAir:~/Code$ svn checkout https://alleg.svn.sourceforge.net/svnroot/alleg/allegro/branches/5.0 allegro
Error validating server certificate for 'https://alleg.svn.sourceforge.net:443':
 - The certificate is not issued by a trusted authority. Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: *.svn.sourceforge.net
 - Valid: from Sat, 25 Feb 2012 23:58:41 GMT until Sun, 31 Mar 2013 19:51:44 GMT
 - Issuer: GeoTrust, Inc., US
 - Fingerprint: 0b:11:76:de:db:4c:74:72:cb:01:49:7d:13:70:c2:f1:13:7b:cb:bf
(R)eject, accept (t)emporarily or accept (p)ermanently? t
</code></p>

<p>Now that worked out well, downloaded the Allegro 5.0 Source. Next step is to build it using CMake but of course I didn't have CMake so let's download that</p>

<p>```bash CMake download
DarkSector@DarkBookAir:~$ brew install cmake
==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/cmake-2.8.8.lio</p>

<h6>################################################################## 100.0%</h6>

<p>==> Pouring cmake-2.8.8.lion.bottle.1.tar.gz
/usr/local/Cellar/cmake/2.8.8: 652 files, 30M
```</p>

<p>Yep that did it. Now to use CMake on the source</p>

<p><code>bash Building Allegro using CMake
DarkSector@DarkBookAir:~/Code/allegro$ mkdir build &amp;&amp; cd build
DarkSector@DarkBookAir:~/Code/allegro/build$ cmake -G Xcode -DWANT_FRAMEWORKS=1 - ..-- The C compiler identification is GNU 4.2.1
-- The CXX compiler identification is GNU 4.2.1
-- Checking whether C compiler has -isysroot
-- Checking whether C compiler has -isysroot - yes
-- Checking whether C compiler supports OSX deployment target flag
-- Checking whether C compiler supports OSX deployment target flag - yes
-- Check for working C compiler using: Xcode
-- Check for working C compiler using: Xcode -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Checking whether CXX compiler has -isysroot
-- Checking whether CXX compiler has -isysroot - yes
-- Checking whether CXX compiler supports OSX deployment target flag
-- Checking whether CXX compiler supports OSX deployment target flag - yes
-- Check for working CXX compiler using: Xcode
-- Check for working CXX compiler using: Xcode -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Allowing GCC to use SSE instructions
-- Could NOT find PkgConfig (missing:  PKG_CONFIG_EXECUTABLE)
-- Check if the system is big endian
-- Searching 16 bit integer
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of unsigned short
-- Check size of unsigned short - done
-- Using unsigned short
-- Check if the system is big endian - little endian
-- Looking for include file dirent.h
-- Looking for include file dirent.h - found
-- Looking for include file inttypes.h
-- Looking for include file inttypes.h - found
-- Looking for include files sys/types.h, linux/joystick.h
-- Looking for include files sys/types.h, linux/joystick.h - not found.
-- Looking for include file stdbool.h
-- Looking for include file stdbool.h - found
-- Looking for include file stdint.h
-- Looking for include file stdint.h - found
-- Looking for include file sys/io.h
-- Looking for include file sys/io.h - not found.
-- Looking for include file sys/stat.h
-- Looking for include file sys/stat.h - found
-- Looking for include file sys/time.h
-- Looking for include file sys/time.h - found
-- Looking for include file time.h
-- Looking for include file time.h - found
-- Looking for include file sys/utsname.h
-- Looking for include file sys/utsname.h - found
-- Looking for include file sys/types.h
-- Looking for include file sys/types.h - found
-- Looking for include file soundcard.h
-- Looking for include file soundcard.h - not found.
-- Looking for include file sys/soundcard.h
-- Looking for include file sys/soundcard.h - not found.
-- Looking for include file machine/soundcard.h
-- Looking for include file machine/soundcard.h - not found.
-- Looking for include file linux/soundcard.h
-- Looking for include file linux/soundcard.h - not found.
-- Looking for include file libkern/OSAtomic.h
-- Looking for include file libkern/OSAtomic.h - found
-- Looking for include file sys/inotify.h
-- Looking for include file sys/inotify.h - not found.
-- Looking for include file sys/timerfd.h
-- Looking for include file sys/timerfd.h - not found.
-- Looking for getexecname
-- Looking for getexecname - not found
-- Looking for mkstemp
-- Looking for mkstemp - found
-- Looking for mmap
-- Looking for mmap - found
-- Looking for mprotect
-- Looking for mprotect - found
-- Looking for sched_yield
-- Looking for sched_yield - found
-- Looking for sysconf
-- Looking for sysconf - found
-- Looking for fseeko
-- Looking for fseeko - found
-- Looking for ftello
-- Looking for ftello - found
-- Check size of _Bool
-- Check size of _Bool - done
-- Performing Test ALLEGRO_HAVE_PROCFS_ARGCV
-- Performing Test ALLEGRO_HAVE_PROCFS_ARGCV - Failed
-- Performing Test ALLEGRO_HAVE_SV_PROCFS_H
-- Performing Test ALLEGRO_HAVE_SV_PROCFS_H - Failed
-- Performing Test ALLEGRO_HAVE_VA_COPY
-- Performing Test ALLEGRO_HAVE_VA_COPY - Success
-- Check if constructors are supported - yes
-- Found OpenGL: /System/Library/Frameworks/OpenGL.framework  
-- Looking for include file pthread.h
-- Looking for include file pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - found
-- Found Threads: TRUE  
-- Found OpenAL: /System/Library/Frameworks/OpenAL.framework  
-- Could NOT find FLAC (missing:  FLAC_INCLUDE_DIR FLAC_LIBRARY)
WARNING: libFLAC not found or compile test failed, disabling support.
-- Could NOT find DUMB (missing:  DUMB_INCLUDE_DIR DUMB_LIBRARY)
WARNING: libdumb not found or compile test failed, disabling support. &lt;http://dumb.sourceforge.net/&gt;
-- Found OGG: /Library/Frameworks/ogg.framework  
-- Could NOT find VORBIS (missing:  VORBISFILE_LIBRARY)
WARNING: libvorbis not found or compile test failed, disabling support.
-- Found Freetype: /Library/Frameworks/freetype.framework  
-- Found ZLIB: /usr/lib/libz.dylib (found version "1.2.5")
-- Found PhysFS: /Library/Frameworks/physfs.framework  
-- Found PHYSFS: /Library/Frameworks/physfs.framework  
-- Performing Test PHYSFS_IMPLICIT_ZLIB
-- Performing Test PHYSFS_IMPLICIT_ZLIB - Success
-- Configuring done
-- Generating done
-- Build files have been written to: /Users/DarkSector/Code/allegro/build
</code></p>

<p>Woah hang on there a minute. No FLAC support, no DUMB and no VORBIS. Hmm, okay let's get that too. I mean while we're at it what's the point in leaving it out. So let's build FLAC, VORBIS, DUMB</p>

<p><code>bash dumb vorbis flac and pkgconfig
DarkSector@DarkBookAir:~/Code/allegro/build$ brew install flac; brew install libvorbis &amp;&amp; brew install pkgconfig
</code></p>

<p><code>bash After installing libvorbis libflac and pkgconfig
DarkSector@DarkBookAir:~/Code/allegro/build$ cmake -G Xcode -D WANT_FRAMEWORKS=1 - ..
-- Allowing GCC to use SSE instructions
-- Found PkgConfig: /usr/local/bin/pkg-config (found version "0.25")
-- Could NOT find FLAC (missing:  FLAC_INCLUDE_DIR FLAC_LIBRARY)
WARNING: libFLAC not found or compile test failed, disabling support.
-- Could NOT find DUMB (missing:  DUMB_INCLUDE_DIR DUMB_LIBRARY)
WARNING: libdumb not found or compile test failed, disabling support. &lt;http://dumb.sourceforge.net/&gt;
-- Performing Test VORBIS_COMPILES
-- Performing Test VORBIS_COMPILES - Success
-- Configuring done
-- Generating done
-- Build files have been written to: /Users/DarkSector/Code/allegro/build
DarkSector@DarkBookAir:~/Code/allegro/build$ cmake -G Xcode -DWANT_FRAMEWORKS=1 - ..
-- Allowing GCC to use SSE instructions
-- Found FLAC: /usr/local/include  
-- Performing Test FLAC_COMPILES
-- Performing Test FLAC_COMPILES - Success
-- Could NOT find DUMB (missing:  DUMB_INCLUDE_DIR DUMB_LIBRARY)
WARNING: libdumb not found or compile test failed, disabling support. &lt;http://dumb.sourceforge.net/&gt;
-- Configuring done
-- Generating done
-- Build files have been written to: /Users/DarkSector/Code/allegro/build
</code></p>

<p>So as it turns out there is no libdumb formula on brew. I think I'll contribute and add it. That'll be pretty cool. Anyways back to the job at hand.</p>

<p>So that's built it. Now to start programming I guess.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lsusb equivalent on Mac OS X]]></title>
    <link href="http://DarkSector.github.com/blog/lsusb-equivalent-on-mac-os-x/"/>
    <updated>2012-05-05T22:58:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/lsusb-equivalent-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Strangely there is no lsusb on Mac OS X. So I searched and found this command</p>

<p><code>bash system_profiler
$ system_profiler SPUSBDataType
</code></p>

<p>Check out the man page for system_profiler, it's got loads of options.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single Trigger Terminal Hack Mac OS X Lion]]></title>
    <link href="http://DarkSector.github.com/blog/single-trigger-terminal-hack-mac-os-x-lion/"/>
    <updated>2012-05-04T16:36:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/single-trigger-terminal-hack-mac-os-x-lion</id>
    <content type="html"><![CDATA[<p>My Macbook Air has all its function keys multiplexed with other special functions like Sound up, Sound down, Mute, etc. Now, I really need to pop up the terminal again and again when I am working and even third party applications like <a href="http://totalterminal.binaryage.com/">TotalTerminal</a> still use a combo. Default being <span class="label label-info">ctrl+~</span>. This is frustrating for someone who's used Guake on Linux. <span class="badge badge-info">F12</span>, I miss you so much.</p>

<p>So what do we do. We hack <em>zey keyboard</em>. Well not really hack it, just have two modes to work. Because I love the sound up and sound down keys along with iTunes trigger. Makes life easier. I am not going to explain the whole code because it's pretty self explanatory, comments should help. Should take just one day of your weekend if you're new.</p>

<p>So let's AppleScript it.
```lua Terminal.script
tell application "System Events" to set TerminalisRunning to (name of processes) contains "Terminal"
-- check whether the terminal is running
-- TerminalisRunning is true or false if the process Terminal is running
if TerminalisRunning then</p>

<pre><code>-- Check, is the terminal visible?
tell application "System Events" to set TerminalisVisible to visible of process "Terminal"
-- TerminalisVisible will now contain true or false if the Terminal is visible or not respectively
set AppInFront to name of (info for (path to frontmost application))
-- set the variable AppInFront to the name of which application is in the front

if TerminalisVisible and AppInFront is "Terminal.app" then

    tell application "System Events" to set visible of process "Terminal" to false
    -- hides the terminal if its process is visible and is on the top

else if TerminalisVisible and AppInFront is not "Terminal.app" then
    -- if terminal's process is visible but it's behind some application
    -- then bring to front
    activate application "Terminal"

else if not TerminalisVisible then
    -- if it's process isn't visible then it activates it
    activate application "Terminal"
end if
</code></pre>

<p>else</p>

<pre><code>-- start the application
activate application "Terminal"
</code></pre>

<p>end if
```</p>

<p>The syntax is very easy. So whenever the script is run, if the terminal is running it'll bring to the front and when it is ran again, it'll hide it. If it's not running, it'll start it.</p>

<p>But the question is how to start it in the first place? Answer is pretty simple <a href="http://www.red-sweater.com/fastscripts/">FastScripts</a>. You can run 10 scripts with the free version. I simply put the script in a new folder name it foo or whatever and in the preferences assign the key <span class="badge badge-info"><strong>F12</strong></span> to it.</p>

<p>There's another problem, <span class="badge badge-info"><strong>F12</strong></span> also gets you to Dashboard. So go to System Preferences and remove that feature.</p>

<p><img class="center" src="http://cl.ly/1s0I310w381E0r3Y3m1d/Screen%20Shot%202012-05-04%20at%205.25.09%20PM.png"></p>

<p>Also, switch the keys permanently here.
<img class="center" src="http://cl.ly/1E0e2j3Z1X2g2b2D2C3a/Screen%20Shot%202012-05-04%20at%205.31.58%20PM.png"></p>

<p>So now we're down to one problem, I'd like to use the special keys too. So let's make another mode for that.</p>

<p>```lua DeveloperMode.script
-- check if GROWL is running
tell application "System Events"</p>

<pre><code>set isRunning to (count of (every process whose bundle identifier is "com.Growl.GrowlHelperApp")) &gt; 0
</code></pre>

<p>end tell</p>

<p>-- check if UI scripting is ON
tell application "System Events"</p>

<pre><code>if not UI elements enabled then
    set UI elements enabled to true
end if
</code></pre>

<p>end tell</p>

<p>tell application "System Events"</p>

<pre><code>tell application "System Preferences"
    reveal anchor "keyboardTab" of pane "com.apple.preference.keyboard"
end tell
click checkbox 1 of tab group 1 of window 1 of application process "System Preferences"
if value of checkbox 1 of tab group 1 of window 1 of application process "System Preferences" is 1 then

    if isRunning then
        tell application id "com.Growl.GrowlHelperApp"
            -- Make a list of all the notification types 
            -- that this script will ever send:
            set the allNotificationsList to ¬
                {"Developer Mode ON", "Developer Mode OFF"}

            -- Make a list of the notifications 
            -- that will be enabled by default.      
            -- Those not enabled by default can be enabled later 
            -- in the 'Applications' tab of the growl prefpane.
            set the enabledNotificationsList to ¬
                {"Developer Mode ON", "Developer Mode OFF"}

            -- Register our script with growl.
            -- You can optionally (as here) set a default icon 
            -- for this script's notifications.
            register as application ¬
                "Seed Notifier" all notifications allNotificationsList ¬
                default notifications enabledNotificationsList ¬
                icon of application "Terminal"


            notify with name ¬
                "Developer Mode ON" title ¬
                "Developer Mode ON" description ¬
                "You can now use Developer keys" application name "Seed Notifier"

        end tell
    end if

else
    if isRunning then
        tell application id "com.Growl.GrowlHelperApp"
            -- Make a list of all the notification types 
            -- that this script will ever send:
            set the allNotificationsList to ¬
                {"Developer Mode ON", "Developer Mode OFF"}

            -- Make a list of the notifications 
            -- that will be enabled by default.      
            -- Those not enabled by default can be enabled later 
            -- in the 'Applications' tab of the growl prefpane.
            set the enabledNotificationsList to ¬
                {"Developer Mode ON", "Developer Mode OFF"}

            -- Register our script with growl.
            -- You can optionally (as here) set a default icon 
            -- for this script's notifications.
            register as application ¬
                "Seed Notifier" all notifications allNotificationsList ¬
                default notifications enabledNotificationsList ¬
                icon of application "Terminal"


            notify with name ¬
                "Developer Mode OFF" title ¬
                "Developer Mode OFF" description ¬
                "Back to the original layout" application name "Seed Notifier"


        end tell
    end if      

end if
</code></pre>

<p>end tell
-- QUIT SYSTEM PREFERENCCES APPLICATION
if application "System Preferences" is running then</p>

<pre><code>tell application "System Preferences" to quit
</code></pre>

<p>end if
```</p>

<p>I made this script trigger with the combination <span class="label label-info">ctrl+ ⌘+]</span> so that it may switch between developer mode and normal mode. I also updated the script with Growl Notification which I find is pretty cool &lt;/proud&gt;</p>

<p>One successful weekend I'd say. I also might develop further on this application and hence the name Seed. Don't ask me what it stands for, it's just a name.</p>

<p>You can find the code <a href="https://github.com/DarkSector/AppleScripts">here</a> on Github.</p>
]]></content>
  </entry>
  
</feed>
