<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Pronoy Chopra's Blog]]></title>
  <link href="http://DarkSector.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://DarkSector.github.com/"/>
  <updated>2012-09-21T16:21:01+05:30</updated>
  <id>http://DarkSector.github.com/</id>
  <author>
    <name><![CDATA[Pronoy Chopra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My experience with CentOS 5.8 and setting up Flask]]></title>
    <link href="http://DarkSector.github.com/blog/my-experience-with-centos-5-dot-8-and-setting-up-flask/"/>
    <updated>2012-08-26T03:44:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/my-experience-with-centos-5-dot-8-and-setting-up-flask</id>
    <content type="html"><![CDATA[<p>I have worked with Debian, Ubuntu Server, ArchLinux and now CentOS and what a kick in the nuts it has been. CentOS 5.8 ships with Python 2.4 and it is an absolute pain to setup. But finally it's done.</p>

<p>So I began with installing Python2.7.3 first.</p>

<p><code>bash install Python2.7
$ wget http://www.python.org/ftp/python/2.7/Python-2.7.tgz
$ tar -xvf Python-2.7.tgz
$ cd Python-2.7
$ su
root$ ./configure --prefix=/usr/local
root$ make &amp;&amp; make altinstall
</code></p>

<p>Now we have Python2.7 binary in /usr/local/bin and we can go about installing Setuptools</p>

<p><code>bash install Setuptools
$ wget http://pypi.python.org/packages/source/s/setuptools/setuptools-0.6c11.tar.gz#md5=7df2a529a074f613b509fb44feefe74e
$ tar -xvf setuptools-0.6c11.tar.gz
$ cd setuptools-0.6c11
$ su
root$ python2.7 setup.py install
root$ easy_install-2.7 install pip
root$ pip-2.7 install virtualenv
</code>
Now, after having done all of this, I needed to install mod_wsgi</p>

<p><code>bash mod_wsgi
$ yum install mod_wsgi
</code></p>

<p>And that's where I asked people at #pocoo to shoot me in the face. It turns out you need mod_wsgi compiled with Python2.7 to use it with Python2.7</p>

<p>So, let's uninstall mod_wsgi and then build it from source</p>

<p><code>bash compile mod_wsgi
$ wget http://code.google.com/p/modwsgi/downloads/detail?name=mod_wsgi-3.4.tar.gz
$ tar -xvf mod_wsgi-3.4.tar.gz
$ cd mod_wsgi-3.4
$ ./configure --using-python=/usr/local/bin/python2.7
$ make
</code></p>

<p>I got this error <a href="http://code.google.com/p/modwsgi/wiki/InstallationIssues#Mixing_32_Bit_And_64_Bit_Packages">http://code.google.com/p/modwsgi/wiki/InstallationIssues#Mixing_32_Bit_And_64_Bit_Packages</a> Which means it needs Python2.7 built with x86_64 not the 32 bit.</p>

<p>So, now, reinstall Python2.7</p>

<p><code>bash install Python2.7
$ cd Python-2.7
$ su
root$ ./configure --prefix=/usr/local --enable-shared
root$ make &amp;&amp; make altinstall
</code></p>

<p>And now reinstall mod_wsgi. Wow, this has been so difficult.</p>

<p>Anyway the problem doesn't end here. Now we have to configure httpd.conf</p>

<p>```xml httpd.conf
WSGISocketPrefix /var/run/wsgi
WSGIPythonHome /var/www/virtual</p>

<h1>WSGIPythonPath /var/www/test/virtual</h1>

<p><VirtualHost 122.99.126.71:80>
ServerName rhknhost
WSGIDaemonProcess herokufinal user=pronoy group=pronoy threads=5
WSGIScriptAlias / "/var/www/herokufinal/herokufinal.wsgi"
DocumentRoot /var/www/herokufinal
ErrorLog /var/www/herokufinal/logs/error.log</p>

<pre><code>    &lt;Directory /var/www/herokufinal&gt;
            WSGIProcessGroup herokufinal
            WSGIApplicationGroup %{GLOBAL}
            WSGIScriptReloading On
            Options Indexes FollowSymlinks Multiviews
            Order deny,allow
            Allow from all
    &lt;/Directory&gt;
</code></pre>

<p></VirtualHost>
```</p>

<p>And then create the .wsgi file for running the application</p>

<p><code>python myapplication.wsgi
activate_this  = '/var/www/virtual/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this))
import sys
sys.path.insert(0, '/var/www/herokufinal')
from profilebuilder import app as application
</code></p>

<p>Jesus. The time it took to figure this out. Oh God, I could've built a fucking house by then. 12 continuous hours. Never again CentOS. Never again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My experience with Pymongo till now]]></title>
    <link href="http://DarkSector.github.com/blog/my-experience-with-pymongo-till-now/"/>
    <updated>2012-05-21T23:34:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/my-experience-with-pymongo-till-now</id>
    <content type="html"><![CDATA[<p>In one word, it's been pretty awesome. <a href="http://api.mongodb.org/python/current/">PyMongo</a>, the Non relational database is pretty good. Here's some code.</p>

<p>```python PyMongo insertion</p>

<p>from pymongo import Connection as c</p>

<p>c = c('localhost', 45000)
db = c['test_db']
users = db.test_db['userlist']
user = {'username':'pronoy', 'password':'foobar'}
users.insert(user)
```</p>

<p>Now to retrieve the info it's even simpler.</p>

<p>```python Retrieving data</p>

<p>from pymongo import Connection as c</p>

<p>c = c('localhost', 45000)
db = c['test_db']
users = db.test_db['userlist']
users.find({'username':'pronoy'})
```</p>

<p>The interesting this is, if the collection isn't available it'll create it and if the database doesn't exist, it'll create that too. I tried using mongodb deployed on our lab machine and the python application running on my machine. Worked like a charm.</p>

<p>Now we can also search according to the _id key generated by the BSON.</p>

<p>```python</p>

<p>from pymongo import Connection as c
from bson.objectid import ObjectId, InvalidId</p>

<p>c = c('localhost', 45000)
db = c['test_db']
users = db.test_db['userlist']
try:</p>

<pre><code>users.find(ObjectId('728als450000000'))
</code></pre>

<p>except InvalidId:</p>

<pre><code>print "No such ID exists"
</code></pre>

<p>else:</p>

<pre><code>for i in users.find(ObjectId('728als450000000')):
    print i
</code></pre>

<p>```</p>

<p>Took me quite a while to figure out that ObjectId and InvalidId belong to BSON and not pymongo. Either way work is good and next post I'll share my experience with Flask-Sijax. It's a really cool way of implementing jQuery Ajax calls.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A pain that is a new mac]]></title>
    <link href="http://DarkSector.github.com/blog/a-pain-that-is-a-new-mac/"/>
    <updated>2012-05-11T13:26:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/a-pain-that-is-a-new-mac</id>
    <content type="html"><![CDATA[<p>Once the novelty of getting a new mac has worn off, the real trouble sets in. Configuring it. Now the worst part about developing on a Mac is the downloading of Xcode and installing it. Xcode is by far the shittiest and the most disgusting piece of software designed by Apple. Now in order to get the latest Xcode you'll need to upgrade to the latest OS. Currently it's <del>10.7.3</del> 10.7.4.</p>

<p>So to get Xcode 4.3 you need to first upgrade to <del>10.7.3</del> 10.7.4 and then go through the motions of getting Xcode first and then letting it install itself.</p>

<p>Since most of the packages need to be built, it's necessary to have GCC 4.2-llvm or clang installed and that comes only with Xcode. So till the time you get it, you can't use Machomebrew or most of the Python packages.</p>

<p><img src="http://f.cl.ly/items/2R3n1y0x2a0X1r193829/Screen%20Shot%202012-05-12%20at%201.59.43%20PM.png"></p>

<p>I guess I'll have to take this POS home and then put it on a continuous install. Thanks a lot Apple. So much for your design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating from MongoAlchemy]]></title>
    <link href="http://DarkSector.github.com/blog/migrating-from-mongoalchemy/"/>
    <updated>2012-05-02T22:59:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/migrating-from-mongoalchemy</id>
    <content type="html"><![CDATA[<p>Extensions like <a href="http://packages.python.org/Flask-MongoAlchemy/">Flask-MongoAlchemy</a> and <a href="http://flask.pocoo.org/docs/patterns/mongokit/">Flask-MongoKit</a> are probably the most useless extensions for <a href="http://flask.pocoo.org/">Flask</a> because they ignore the inherent reason why Mongo is to be used. What is the point of using <a href="http://www.mongodb.org/">MongoDB</a> when you are going to used a fix schema. A fixed model declaration should be used with RDBMS like PostGRE and SQLite by using <a href="http://www.sqlalchemy.org/">SQLAlchemy</a>.</p>

<p>I wonder why hasn't anyone come up with this question before. Either way I'll be using PyMongo now. Flask has an extension for that, it's called <a href="http://flask-pymongo.readthedocs.org/en/0-1/index.html">Flask-PyMongo</a>.</p>

<h2>MongoDB Basics</h2>

<p>Here're some interesting relations between SQL and MongoDB's way of organizing things.</p>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>SQL</th>
            <th>MongoDB</th>
        </tr>   
    </thead>
    <tbody> 
        <tr>
            <td>Database</td>
            <td>Database</td>
        </tr>
        <tr>
            <td>Table</td>
            <td>Collection</td>
        </tr>
        <tr>
            <td>Row</td>
            <td>Document</td>
        </tr>
        <tr>
            <td>Index</td>
            <td>Index</td>
        </tr>
        <tr>
            <td>Primary key</td>
            <td>_id field</td>
        </tr>
    </tbody>
</table>


<p>A complete list of relations is given in the mapping chart over at <a href="http://www.mongodb.org/display/DOCS/SQL+to+Mongo+Mapping+Chart">MongoDB's website</a></p>

<p>This is neat considering you don't need any fixed schema, just stash the data in and you can easily recover it. So now instead of using MongoAlchemy we will be using PyMongo directly which is fairly easy as well.</p>

<h2>Why Mongo with Python makes sense</h2>

<p>Python Dicts and Mongo's BSON documents are just the same. So passing dicts as documents is fairly intuitive. Here's a comparison:</p>

<p>```python dict.py</p>

<blockquote><blockquote><blockquote><p>a = {"a" : "b", "c" : "d", "k" : 3}
```</p></blockquote></blockquote></blockquote>

<p>```javascript MongoDB schema example
{
  _id : ObjectId("4e77bb3b8a3e000000004f7a"),
  when : Date("2011-09-19T02:10:11.3Z",
  author : "alex",
  title : "No Free Lunch",
  text : "This is the text of the post.  It could be very long.",
  tags : [ "business", "ramblings" ],
  votes : 5,
  voters : [ "jane", "joe", "spencer", "phyllis", "li" ],
  comments : [</p>

<pre><code>{ who : "jane", when : Date("2011-09-19T04:00:10.112Z"),
  comment : "I agree." },
{ who : "meghan", when : Date("2011-09-20T14:36:06.958Z"),
  comment : "You must be joking.  etc etc ..." }
</code></pre>

<p>  ]
}
```</p>

<p>It's similar and therefore easier.</p>

<h2>PyMongo Usage</h2>

<p><code>bash  start the mongo daemon on any port and application directory to store database
$ mongod --port 45000 --dbpath $PATHTOAPPLICATIONDIRECTORY
</code></p>

<p>```python</p>

<h1>import pymongo and make the connection</h1>

<p>from pymongo import Connection</p>

<h1>connect it to the mongo daemon running on the port</h1>

<p>connection = Connection('localhost', 45000)
```</p>

<p>After that we'll need to start creating databases and collections and inserting documents, I'll post the code later when I am done with general implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Attempting integration with WTForms with MongoAlchemy]]></title>
    <link href="http://DarkSector.github.com/blog/attempting-integration-with-wtforms-with-mongoalchemy/"/>
    <updated>2012-04-18T10:56:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/attempting-integration-with-wtforms-with-mongoalchemy</id>
    <content type="html"><![CDATA[<p>So the forms.py looks something like this.</p>

<p>``` python forms.py
from <strong>future</strong> import with_statement</p>

<p>from flask import Flask, request, session, g, redirect, url_for, abort, \</p>

<pre><code> render_template, flash
</code></pre>

<p>from flaskext.wtf import Form, TextField, TextAreaField, \</p>

<pre><code> PasswordField, SubmitField, Required, SelectField, ValidationError, \
 RadioField
</code></pre>

<p>from foo import app
from foo import db</p>

<p>class BuilderForm(Form):</p>

<pre><code>"""Function used to create custom fields"""
field_name = TextField()
field_type = SelectField(u'Type of Field',choices=[('','')])
submit = SubmitField('Submit Information')
</code></pre>

<p>class Register(Form):</p>

<pre><code>"""Form for registeration of professional, org or moderator"""      
usertype = SelectField(u'Type of user', choices=[('org','Organization'),('pro','Professional'),('mod','Moderator')])
name = TextField('Organization/Professional Name')
email = TextField('Email addresss *')
phone = TextField('Phone Number *')
register = SubmitField('Submit user information')
</code></pre>

<p>class LoginForm(Form):</p>

<pre><code>"""Form for logging in for Professionals and Orgs"""

email = TextField('Your email which you used to register')
password = PasswordField('Your passsword')
usertype = SelectField(u'Log me in as', choices=[('org','Organization'),('pro','Professional'),('mod','Moderator')])
login = SubmitField('Login')
</code></pre>

<p>class StarterForm(Form):</p>

<pre><code>"""Form for starting off the profile display process"""
region = SelectField(u'Select you state', choices=[])
pincode = TextField("Your pincode")
specific = TextField("Town or Village")
submit = SubmitField('Submit')
</code></pre>

<p>```</p>

<p>Notice how the region field in StarterForm would require database driven choices? Yeah I need to figure out how to do that in my views function. It's important to render the views otherwise it might break the whole thing by circular imports.</p>

<p>Also since Forms are classes it would be difficult to pass the arguments when calling the form in views. Okay let's attempt that.</p>
]]></content>
  </entry>
  
</feed>
