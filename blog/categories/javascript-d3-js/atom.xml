<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript,d3.js | Pronoy Chopra's Blog]]></title>
  <link href="http://DarkSector.github.com/blog/categories/javascript-d3-js/atom.xml" rel="self"/>
  <link href="http://DarkSector.github.com/"/>
  <updated>2012-07-07T16:19:11+05:30</updated>
  <id>http://DarkSector.github.com/</id>
  <author>
    <name><![CDATA[Pronoy Chopra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A random graph using d3.js]]></title>
    <link href="http://DarkSector.github.com/blog/a-random-graph-using-d3-dot-js/"/>
    <updated>2012-05-01T19:17:00+05:30</updated>
    <id>http://DarkSector.github.com/blog/a-random-graph-using-d3-dot-js</id>
    <content type="html"><![CDATA[<p><a href="http://d3js.org">D3.js</a> created by <a href="http://bost.ocks.org/mike/">Mike Bostock</a> is basically a javascript library that allows you to create documents based on data. The name D3 means Data Driven Documents and is a very nifty library to represent data on the web.
I came across this when I was looking for ways to represent data in real time on a web browser. I am trying to create data acquisition devices that do that. I've also been working on Python for that same thing but I'll get to that later.</p>

<p>So I have this random graph on my homepage, it's just an edited version of an <a href="http://mbostock.github.com/d3/ex/stack.html">example</a> on the d3 page. Here's the code if you want to take a look at it.</p>

<p>```javascript stack.js
var n = 2, // number of layers</p>

<pre><code>m = 60, // number of samples per layer
data = d3.layout.stack()(stream_layers(n, m, .1)),
color = d3.interpolateRgb("#00bfff", "#aaa");
//00bfff
//1e90ff
</code></pre>

<p>var margin = 20,</p>

<pre><code>width = 824,
height = 300 - .5 - margin,
mx = m,
my = d3.max(data, function(d) {
  return d3.max(d, function(d) {
    return d.y0 + d.y;
  });
}),
mz = d3.max(data, function(d) {
  return d3.max(d, function(d) {
    return d.y;
  });
}),
x = function(d) { return d.x * width / mx; },
y0 = function(d) { return height - d.y0 * height / my; },
y1 = function(d) { return height - (d.y + d.y0) * height / my; },
y2 = function(d) { return d.y * height / mz; }; // or `my` to not rescale
</code></pre>

<p>var vis = d3.select("#chart")
  .append("svg")</p>

<pre><code>.attr("width", width)
.attr("height", height + margin);
</code></pre>

<p>var layers = vis.selectAll("g.layer")</p>

<pre><code>.data(data)
</code></pre>

<p>  .enter().append("g")</p>

<pre><code>.style("fill", function(d, i) { return color(i / (n - 1)); })
.attr("class", "layer");
</code></pre>

<p>var bars = layers.selectAll("g.bar")</p>

<pre><code>.data(function(d) { return d; })
</code></pre>

<p>  .enter().append("g")</p>

<pre><code>.attr("class", "bar")
.attr("transform", function(d) { return "translate(" + x(d) + ",0)"; });
</code></pre>

<p>bars.append("rect")</p>

<pre><code>.attr("width", x({x: .9}))
.attr("x", 0)
.attr("y", height)
.attr("height", 0)
</code></pre>

<p>  .transition()</p>

<pre><code>.delay(function(d, i) { return i * 10; })
.attr("y", y1)
.attr("height", function(d) { return y0(d) - y1(d); });
</code></pre>

<p>var labels = vis.selectAll("text.label")</p>

<pre><code>.data(data[0])
</code></pre>

<p>  .enter().append("text")</p>

<pre><code>.attr("class", "label")
.attr("x", x)
.attr("y", height + 6)
.attr("dx", x({x: .45}))
.attr("dy", ".71em")
.attr("text-anchor", "middle")
.text(function(d, i) { return i; });
</code></pre>

<p>vis.append("line")</p>

<pre><code>.attr("x1", 0)
.attr("x2", width - x({x: .1}))
.attr("y1", height)
.attr("y2", height);
</code></pre>

<p>function transitionGroup() {
  var group = d3.selectAll("#chart");</p>

<p>  group.select("#group")</p>

<pre><code>  .attr("class", "first active");
</code></pre>

<p>  group.select("#stack")</p>

<pre><code>  .attr("class", "last");
</code></pre>

<p>  group.selectAll("g.layer rect")</p>

<pre><code>.transition()
  .duration(500)
  .delay(function(d, i) { return (i % m) * 10; })
  .attr("x", function(d, i) { return x({x: .9 * ~~(i / m) / n}); })
  .attr("width", x({x: .9 / n}))
  .each("end", transitionEnd);
</code></pre>

<p>  function transitionEnd() {</p>

<pre><code>d3.select(this)
  .transition()
    .duration(500)
    .attr("y", function(d) { return height - y2(d); })
    .attr("height", y2);
</code></pre>

<p>  }
}</p>

<p>function transitionStack() {
  var stack = d3.select("#chart");</p>

<p>  stack.select("#group")</p>

<pre><code>  .attr("class", "first");
</code></pre>

<p>  stack.select("#stack")</p>

<pre><code>  .attr("class", "last active");
</code></pre>

<p>  stack.selectAll("g.layer rect")</p>

<pre><code>.transition()
  .duration(500)
  .delay(function(d, i) { return (i % m) * 10; })
  .attr("y", y1)
  .attr("height", function(d) { return y0(d) - y1(d); })
  .each("end", transitionEnd);
</code></pre>

<p>  function transitionEnd() {</p>

<pre><code>d3.select(this)
  .transition()
    .duration(500)
    .attr("x", 0)
    .attr("width", x({x: .9}));
</code></pre>

<p>  }
}
```</p>

<p>I've just changed a bit, only 2 layers instead of 4 and the colors are more according to my theme on the front page. The random number generation is also done through javascript. Here's the code:</p>

<p>```javascript random.js
/<em> Inspired by Lee Byron's test data generator. </em>/
function stream_layers(n, m, o) {
  if (arguments.length &lt; 3) o = 0;
  function bump(a) {</p>

<pre><code>var x = 1 / (.1 + Math.random()),
    y = 2 * Math.random() - .5,
    z = 10 / (.1 + Math.random());
for (var i = 0; i &lt; m; i++) {
  var w = (i / m - y) * z;
  a[i] += x * Math.exp(-w * w);
}
</code></pre>

<p>  }
  return d3.range(n).map(function() {</p>

<pre><code>  var a = [], i;
  for (i = 0; i &lt; m; i++) a[i] = o + o * Math.random();
  for (i = 0; i &lt; 5; i++) bump(a);
  return a.map(stream_index);
});
</code></pre>

<p>}</p>

<p>/<em> Another layer generator using gamma distributions. </em>/
function stream_waves(n, m) {
  return d3.range(n).map(function(i) {</p>

<pre><code>return d3.range(m).map(function(j) {
    var x = 20 * j / m - i / 3;
    return 2 * x * Math.exp(-.5 * x);
  }).map(stream_index);
});
</code></pre>

<p>}</p>

<p>function stream_index(d, i) {
  return {x: i, y: Math.max(0, d)};
}
```</p>

<p>I asked a stupid question before, on the mailing list. Here's <a href="http://groups.google.com/group/d3-js/browse_thread/thread/891cd4f571b0f6e4#">the link</a> to it. It's good if you want to start with d3.js. All the best if you are.</p>
]]></content>
  </entry>
  
</feed>
